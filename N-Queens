#include <iostream>
#include <vector>
using namespace std;

// Function to check if a queen can be placed at board[row][col]
bool isSafe(vector<string>& board, int row, int col, int N) {
    int i, j;

    // Check the left side of the current row
    for (i = 0; i < col; ++i)
        if (board[row][i] == 'Q')
            return false;

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; --i, --j)
        if (board[i][j] == 'Q')
            return false;

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; ++i, --j)
        if (board[i][j] == 'Q')
            return false;

    return true;
}

// Function to solve the N-Queens problem
bool solveNQueens(vector<string>& board, int col, int N) {
    if (col >= N)
        return true;

    for (int i = 0; i < N; ++i) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 'Q';

            if (solveNQueens(board, col + 1, N))
                return true;

            board[i][col] = '.';
        }
    }
    return false;
}

// Function to print the N-Queens solution
void printSolution(vector<string>& board) {
    for (const string& row : board)
        cout << row << endl;
}

int main() {
    int N = 4;  // Change N to the desired board size
    vector<string> board(N, string(N, '.'));  // Initialize board with '.'

    if (solveNQueens(board, 0, N))
        printSolution(board);
    else
        cout << "Solution does not exist";

    return 0;
}
